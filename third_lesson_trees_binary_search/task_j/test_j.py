import pytest
from io import StringIO
import sys
from j import main


@pytest.mark.parametrize('input_data, answer', [    
    # Базовые тесты из условия
    ('4\n6 14 70 1\n70 3 16 5', '2'),
    ('1\n2\n2', '0'),
    ('1\n3\n2', '-1'),
    
    # Тест на минимальные значения
    ('1\n1\n1', '0'),
    ('1\n0\n0', '0'),
    ('1\n0\n1', '0'),
    
    # Тест на максимальные значения (n=1)
    ('1\n1000000000\n1000000000', '0'),
    ('1\n1000000000\n999999999', '-1'),
    
    # Тест с двумя днями
    ('2\n10 10\n5 15', '1'),  # нужно переносить
    ('2\n10 10\n20 0', '1'),  # все во второй день
    ('2\n10 10\n0 20', '1'),  # все в первый день
    
    # Тест с тремя днями
    ('3\n5 10 15\n10 10 10', '1'),
    ('3\n5 10 15\n30 0 0', '2'),
    ('3\n5 10 15\n0 0 30', '2'),
    ('3\n5 10 15\n0 30 0', '1'),
    
    # Тест с равномерным распределением
    ('4\n10 10 10 10\n10 10 10 10', '0'),
    ('4\n10 10 10 10\n40 0 0 0', '3'),
    ('4\n10 10 10 10\n0 40 0 0', '2'),
    ('4\n10 10 10 10\n0 0 40 0', '2'),
    ('4\n10 10 10 10\n0 0 0 40', '3'),
    
    # Тест с пиками нагрузки
    ('5\n100 1 1 1 1\n1 1 1 1 100', '4'),
    ('5\n1 100 1 1 1\n1 1 1 100 1', '2'),
    ('5\n1 1 100 1 1\n1 100 1 1 1', '1'),
    ('5\n1 1 1 100 1\n100 1 1 1 1', '3'),
    ('5\n1 1 1 1 100\n1 100 1 1 1', '3'),
    
    # Тест с нулевыми вместимостями
    ('3\n5 0 5\n0 10 0', '1'),
    ('3\n0 10 0\n5 0 5', '1'),
    ('3\n1 1 1\n0 0 3', '2'),
    ('3\n1 1 1\n3 0 0', '2'),
    
    # Тест с большими числами
    ('3\n1000000000 500000000 500000000\n1500000000 500000000 0', '1'),
    ('3\n1000000000 500000000 500000000\n0 500000000 1500000000', '2'),
    ('3\n1000000000 1000000000 1000000000\n3000000000 0 0', '2'),
    
    # Тест на граничные случаи с k=0
    ('3\n1 2 3\n1 2 3', '0'),
    ('3\n1 2 3\n3 2 1', '1'),
    ('3\n1 2 3\n0 6 0', '1'),
    
    # Тест с последовательностями
    ('6\n1 2 3 4 5 6\n21 0 0 0 0 0', '5'),
    ('6\n1 2 3 4 5 6\n0 0 0 0 0 21', '5'),
    ('6\n1 2 3 4 5 6\n0 0 21 0 0 0', '3'),
    
    # Сложный тест с чередованием
    ('4\n100 1 100 1\n101 100 1 100', '1'),
    ('4\n100 1 100 1\n100 101 100 1', '0'),
    
    # Тест на оптимальность бинарного поиска
    ('5\n10 20 30 40 50\n150 0 0 0 0', '4'),
    ('5\n10 20 30 40 50\n0 150 0 0 0', '3'),
    ('5\n10 20 30 40 50\n0 0 150 0 0', '2'),
    ('5\n10 20 30 40 50\n0 0 0 150 0', '3'),
    ('5\n10 20 30 40 50\n0 0 0 0 150', '4'),
    
    # Тест с одинаковыми данными
    ('10\n5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5', '0'),
    ('10\n10 10 10 10 10 10 10 10 10 10\n100 100 100 100 100 100 100 100 100 100', '0'),
    
    # Тест с минимальным k > 0
    ('3\n10 0 0\n0 5 5', '2'),
    ('3\n0 10 0\n5 0 5', '1'),
    ('3\n0 0 10\n5 5 0', '2'),
    
    # Тест с крайними случаями распределения
    ('3\n0 0 0\n0 0 0', '0'),
    ('2\n5 5\n10 0', '1'),
    ('2\n5 5\n0 10', '1'),
    
    # Тест с одним днем и нулевыми значениями
    ('1\n0\n0', '0'),
    ('1\n0\n5', '0'),
    
    # Сложный тест с большим n (упрощенный)
    ('1000\n' + '1 '*999 + '1\n' + '1000 '*999 + '1000', '0'),
])
def test_h(input_data, answer):
    sys.stdin = StringIO(input_data)
    
    result = main()
    assert result == answer

