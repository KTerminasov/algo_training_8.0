import pytest
from io import StringIO
import sys
from f import main


@pytest.mark.parametrize('input_data, answer', [    
    # Test 1: Пример из задачи (смешанное дерево: цепочка с ветками)
    ('6\n0 1 2 3 3 3\n5\n4 1\n1 4\n3 6\n6 3\n2 5\n', '0\n1\n1\n0\n1'),
    
    # Test 2: n=1, m=0 (пустой вывод)
    ('1\n0\n0\n', ''),
    
    # Test 3: n=1, m=1, self-запрос (a не предок себя)
    ('1\n0\n1\n1 1\n', '0'),
    
    # Test 4: n=2, простое родитель-ребёнок
    ('2\n0 1\n3\n1 2\n2 1\n1 1\n', '1\n0\n0'),
    
    # Test 5: n=3, цепочка (предки по пути)
    ('3\n0 1 2\n4\n1 3\n2 3\n3 2\n3 1\n', '1\n1\n0\n0'),
    
    # Test 6: n=4, звезда (корень с детьми, братья не предки)
    ('4\n0 1 1 1\n5\n1 2\n2 1\n2 3\n3 2\n4 4\n', '1\n0\n0\n0\n0'),
    
    # Test 7: n=7, сбалансированное бинарное-подобное (кросс-ветки)
    ('7\n0 1 1 2 2 3 3\n6\n1 7\n2 7\n3 7\n4 2\n2 4\n7 3\n', '1\n0\n1\n0\n1\n0'),
    
    # Test 8: n=5, длинная цепочка (глубокие предки)
    ('5\n0 1 2 3 4\n5\n1 5\n3 5\n5 3\n2 4\n5 5\n', '1\n1\n0\n1\n0'),
    
    # Test 9: n=4, дерево с неравными ветками (одна глубокая, одна мелкая)
    ('4\n0 1 1 3\n6\n1 4\n3 4\n4 3\n2 4\n4 2\n2 2\n', '1\n1\n0\n0\n0\n0'),
    
    # Test 10: n=6, куст с подветками (средние предки)
    ('6\n0 1 1 2 2 3\n5\n1 6\n2 6\n3 6\n6 3\n5 4\n', '1\n0\n1\n0\n0'),
    
    # Test 11: n=5, дерево с несколькими уровнями (проверка не-предков на одном уровне)
    ('5\n0 1 1 2 3\n4\n1 5\n2 5\n3 5\n5 4\n', '1\n0\n1\n0'),
    
    # Test 12: n=8, более сложное (ветки на разных уровнях, multiple self)
    ('8\n0 1 1 2 2 3 3 4\n7\n1 8\n2 8\n4 8\n8 4\n3 7\n5 2\n8 8\n', '1\n1\n1\n0\n1\n0\n0'),
    
    # Test 13: n=2, m=0 (пустые запросы)
    ('2\n0 1\n0\n', ''),
    
    # Test 14: n=10, цепочка (тест глубины, small для рекурсии)
    ('10\n0 1 2 3 4 5 6 7 8 9\n3\n1 10\n5 10\n10 5\n', '1\n1\n0'),
    
    # Test 15: n=5, звезда с одним поддеревом (смешанный случай)
    ('5\n0 1 1 1 4\n4\n1 5\n4 5\n5 4\n2 5\n', '1\n1\n0\n0'),
    
    # Test 16: n=9, почти полное бинарное (проверка всех аспектов)
    ('9\n0 1 1 2 2 3 3 4 4\n8\n1 9\n2 9\n4 9\n9 4\n3 6\n5 2\n7 3\n8 1\n', '1\n1\n1\n0\n1\n0\n0\n0'),
    
    # Test 17: n=3, запросы с не-предками и self
    ('3\n0 1 2\n3\n1 1\n2 2\n3 3\n', '0\n0\n0'),
    
    # Test 18: n=4, дерево с отсоединённой веткой? (но single tree, all connected)
    ('4\n0 1 2 1\n4\n1 4\n2 3\n3 2\n4 3\n', '1\n1\n0\n0'),
    
    # Test 19: n=6, несколько запросов на листья
    ('6\n0 1 2 1 1 1\n5\n1 6\n2 3\n4 5\n6 1\n3 2\n', '1\n1\n0\n0\n0'),
    
    # Test 20: n=1, m=2, включая invalid но nodes ok
    ('1\n0\n2\n1 1\n1 1\n', '0\n0'),
])
def test_h(input_data, answer):
    sys.stdin = StringIO(input_data)
    
    result = main()
    assert result == answer

