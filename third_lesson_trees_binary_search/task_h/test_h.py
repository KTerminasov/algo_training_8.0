import pytest
from io import StringIO
import sys
from h import main


@pytest.mark.parametrize('input_data, answer', [
    # Пример 1 из условия
    ('5\n3 3 2 5 1\n1 2\n2 3\n2 4\n4 5', 2),

    # Пример 2 из условия
    ('3\n1 2 1\n2 3\n1 2', 2),

    # Тест 1: Один узел
    ('1\n100', 1),

    # Тест 2: Два узла с разным количеством жителей
    ('2\n10 20\n1 2', 1),

    # Тест 3: Два узла с одинаковым количеством жителей
    ('2\n15 15\n1 2', 1),

    # Тест 4: Цепочка из 3 узлов (1-2-3)
    ('3\n10 1 10\n1 2\n2 3', 2),

    # Тест 5: Звезда с центром в 1
    ('5\n100 1 1 1 1\n1 2\n1 3\n1 4\n1 5', 1),

    # Тест 6: Звезда с центром в 2
    ('5\n1 100 1 1 1\n1 2\n2 3\n2 4\n2 5', 2),

    # Тест 7: Сбалансированное дерево
    ('7\n1 10 1 1 1 1 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7', 2),

    # Тест 8: Дерево где несколько правильных ответов (симметричное)
    ('5\n2 1 1 1 1\n1 2\n1 3\n2 4\n3 5', 1),

    # Тест 9: Большие числа жителей
    ('4\n1000000000 1 1 1\n1 2\n1 3\n1 4', 1),

    # Тест 10: Сложный случай с перевесом в поддереве
    ('6\n1 1 10 1 1 1\n1 2\n2 3\n1 4\n4 5\n4 6', 2),

    # Тест 11: Полное бинарное дерево глубины 2
    ('7\n5 3 2 1 1 1 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7', 1),

    # Тест 12: Дерево где корень не оптимален
    ('4\n100 1 50 50\n1 2\n2 3\n2 4', 2),
    
    # Тест 13: Максимально несбалансированное дерево (цепочка)
    ('6\n1 100 1 1 1 1\n1 2\n2 3\n3 4\n4 5\n5 6', 2),
    
    # Тест 14: Дерево с двумя большими кластерами
    ('8\n1 1 1 100 1 1 100 1\n1 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8', 1),
    
    # Тест 15: Сложный случай с перевесом в листе
    ('5\n1 2 1 1 100\n1 2\n1 3\n2 4\n2 5', 2),
    
    # Тест 16: Полное дерево с тремя уровнями
    ('8\n1 2 3 4 5 6 7 8\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8', 3),
    
    # Тест 17: Дерево где оптимальный ответ - лист
    ('5\n10 1 1 1 1\n1 2\n2 3\n3 4\n4 5', 5),
    
    # Тест 18: Дерево с максимальными значениями
    ('3\n1000000000 1000000000 1000000000\n1 2\n2 3', 2),
])
def test_h(input_data, answer):
    sys.stdin = StringIO(input_data)
    
    result = main()
    assert result == answer

